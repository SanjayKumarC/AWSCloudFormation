{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "AWS CloudFormation Template which creates Percona cluster setup.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "HostKeys" : {
      "Description" : "Host Key",
      "Type" : "String"
    },

    "SecretAccessKey" : {
      "Description" : "Secret access key",
      "Type" : "String"
    },

    "InstanceType" : {
      "Description" : "ChefServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    } 
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" }      
    },
    
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-d7a18dbe", "64" : "ami-bba18dd2", "64HVM" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-def297ee", "64" : "ami-ccf297fc", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-923909d7", "64" : "ami-a43909e1", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },
  
  "Resources" : {

	  "ChefServer" : {
		  "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Description" : "Bootstrap ChefServer",

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "wget"  : []
              }
            }
          }
        }
      },

      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region"}, { "Fn::FindInMap" : [ "AWSInstanceType2Arch" , { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
                
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "cfn-init --region ", { "Ref" : "AWS::Region" },
            "    -s ", { "Ref" : "AWS::StackId" }, " -r ChefServer ", " -c orderby ",
            "         --access-key ", { "Ref" : "HostKeys" },
            "         --secret-key ", {"Ref" : "SecretAccessKey"}, " || error_exit 'Failed to run cfn-init'\n",

          "/bin/touch /root/testfile\n",
          "/bin/echo \"Starting script\" >> /root/testfile\n",

          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", {"Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "yum update -y\n",
          "/sbin/service iptables stop\n",
          "/sbin/service ip6tables stop\n",
          "/sbin/chkconfig iptables off\n",
          "/sbin/chkconfig ip6tables off\n",

          "#Install ChefServer package\n",
          "cd /root\n",
          "/usr/bin/wget https://s3.amazonaws.com/oleksandr-vorobiov-storage/default.rb\n",          
          "/usr/bin/wget https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chef-server-11.0.10-1.el6.x86_64.rpm\n",
          "/bin/rpm -ivh /root/chef-server-11.0.10-1.el6.x86_64.rpm\n",
          "/bin/cp -p /root/default.rb /opt/chef-server/embedded/cookbooks/runit/recipes/default.rb\n",

          "Configure ChefServer\n",
          "su - -c '/usr/bin/chef-server-ctl reconfigure'\n",
          "su - -c '/usr/bin/chef-server-ctl restart'\n",

          "/bin/mkdir /root/.aws\n",
          "/bin/touch /root/.aws/config\n",
          "/bin/echo '[default]' >> /root/.aws/config\n",
          "/bin/echo 'region = ",  {"Ref" : "AWS::Region" }, "' >> /root/.aws/config\n",
          "/bin/echo 'aws_access_key_id = ", { "Ref" : "HostKeys" }, "' >> /root/.aws/config\n",
          "/bin/echo 'aws_secret_access_key = ", { "Ref" : "SecretAccessKey" }, "' >> /root/.aws/config\n",

          "/usr/bin/aws s3 cp /etc/chef-server/admin.pem s3://oleksandr-vorobiov-storage/\n",
          "/usr/bin/aws s3 cp /etc/chef-server/chef-validator.pem s3://oleksandr-vorobiov-storage/\n",

          "/usr/bin/curl -L https://www.opscode.com/chef/install.sh | /bin/bash\n",
          "/bin/mkdir /root/.chef\n",
          "/bin/mkdir /etc/chef\n",
          "/bin/mkdir /etc/chef/cookbooks\n",
          "/bin/mkdir /etc/chef/roles\n",

          "/bin/cp -p /etc/chef-server/admin.pem /etc/chef/client.pem\n",
          "/usr/bin/aws s3 cp s3://oleksandr-vorobiov-storage/knife_client.rb /root/.chef/knife.rb\n",
          "/usr/bin/aws s3 cp s3://oleksandr-vorobiov-storage/roles/ /etc/chef/roles --recursive\n",
          "/usr/bin/aws s3 cp s3://oleksandr-vorobiov-storage/cookbooks/ /etc/chef/cookbooks --recursive\n",          
          "/usr/bin/knife cookbook site download ntp\n",          
          "/usr/bin/knife cookbook site download openssl\n",
          "/bin/mv /root/*.tar.gz /etc/chef/cookbooks\n",
          "for i in `/bin/ls /etc/chef/cookbooks/*.tar.gz`; do /bin/tar zxf $i -C /etc/chef/cookbooks/; /bin/rm -f $i; done\n",
          "for i in `/bin/ls /etc/chef/cookbooks`; do /usr/bin/knife cookbook upload $i; done\n",          
          "/usr/bin/knife role from file /etc/chef/roles/*\n",          
          "/bin/echo -e \"*/5 * * * * root /usr/bin/knife exec -E 'nodes.find(\\\"NOT role:BaseRole\\\") { |n| n.run_list.add(\\\"role[BaseRole]\\\"); n.save}' -c '/root/.chef/knife.rb'\" >> /etc/crontab\n",
          "/bin/echo -e \"*/5 * * * * root /usr/bin/knife exec -E 'nodes.find(\\\"cluster_role:master AND role:BaseRole AND NOT role:PerconaMaster\\\") { |n| n.run_list.add(\\\"role[PerconaMaster]\\\"); n.save}' -c '/root/.chef/knife.rb'\" >> /etc/crontab\n",
          "/bin/echo -e \"*/5 * * * * root /usr/bin/knife exec -E 'nodes.find(\\\"cluster_role:slave AND role:BaseRole AND NOT role:PerconaSlave\\\") { |n| n.run_list.add(\\\"role[PerconaSlave]\\\"); n.save}' -c '/root/.chef/knife.rb'\" >> /etc/crontab\n",
                    

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"ChefServer setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
	  },

   "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "ChefServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1200"
      }
    },
    
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 8080",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }      
    }          
},

"Outputs" : {
    "ChefServerURL" : {
      "Value" : { "Fn::Join" : ["", ["https://", { "Fn::GetAtt" : [ "ChefServer", "PublicDnsName" ]}, ":443"]] },
      "Description" : "ChefServer"
    }
  }
}
